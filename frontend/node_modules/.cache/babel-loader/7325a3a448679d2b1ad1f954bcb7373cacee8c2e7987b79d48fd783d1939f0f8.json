{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\singh\\\\pathfinder-app\\\\frontend\\\\src\\\\grid.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './grid.css'; // For styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Grid = () => {\n  _s();\n  const [selectedCells, setSelectedCells] = useState({\n    start: null,\n    end: null\n  });\n  const [path, setPath] = useState([]);\n  useEffect(() => {\n    if (selectedCells.start && selectedCells.end) {\n      fetchPath(selectedCells.start, selectedCells.end);\n    }\n  }, [selectedCells]);\n  const handleCellClick = (x, y) => {\n    if (!selectedCells.start) {\n      setSelectedCells({\n        ...selectedCells,\n        start: {\n          x,\n          y\n        }\n      });\n    } else if (!selectedCells.end) {\n      setSelectedCells({\n        ...selectedCells,\n        end: {\n          x,\n          y\n        }\n      });\n    }\n  };\n  const fetchPath = async (start, end) => {\n    try {\n      const res = await fetch('http://localhost:8080/find-path', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          start,\n          end\n        })\n      });\n      const data = await res.json();\n      setPath(data.shortestPath);\n    } catch (error) {\n      console.error('Error fetching path:', error);\n    }\n  };\n  const handleReset = () => {\n    setSelectedCells({\n      start: null,\n      end: null\n    });\n    setPath([]); // Clear the path when resetting\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: [...Array(20)].map((_, row) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [...Array(20)].map((_, col) => {\n          var _selectedCells$start, _selectedCells$start2, _selectedCells$end, _selectedCells$end2;\n          const isStart = ((_selectedCells$start = selectedCells.start) === null || _selectedCells$start === void 0 ? void 0 : _selectedCells$start.x) === row && ((_selectedCells$start2 = selectedCells.start) === null || _selectedCells$start2 === void 0 ? void 0 : _selectedCells$start2.y) === col;\n          const isEnd = ((_selectedCells$end = selectedCells.end) === null || _selectedCells$end === void 0 ? void 0 : _selectedCells$end.x) === row && ((_selectedCells$end2 = selectedCells.end) === null || _selectedCells$end2 === void 0 ? void 0 : _selectedCells$end2.y) === col;\n          const isPath = path.some(p => p.x === row && p.y === col);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `cell ${isStart ? 'start' : isEnd ? 'end' : isPath ? 'path' : ''}`,\n            onClick: () => handleCellClick(row, col)\n          }, col, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 17\n          }, this);\n        })\n      }, row, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"reset-button\",\n      onClick: handleReset,\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(Grid, \"VGbpfChPwj7xhi9T+45h6E5UKMs=\");\n_c = Grid;\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Grid","_s","selectedCells","setSelectedCells","start","end","path","setPath","fetchPath","handleCellClick","x","y","res","fetch","method","headers","body","JSON","stringify","data","json","shortestPath","error","console","handleReset","className","children","Array","map","_","row","col","_selectedCells$start","_selectedCells$start2","_selectedCells$end","_selectedCells$end2","isStart","isEnd","isPath","some","p","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/singh/pathfinder-app/frontend/src/grid.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './grid.css'; // For styling\r\n\r\nconst Grid = () => {\r\n  const [selectedCells, setSelectedCells] = useState({ start: null, end: null });\r\n  const [path, setPath] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (selectedCells.start && selectedCells.end) {\r\n      fetchPath(selectedCells.start, selectedCells.end);\r\n    }\r\n  }, [selectedCells]);\r\n\r\n  const handleCellClick = (x, y) => {\r\n    if (!selectedCells.start) {\r\n      setSelectedCells({ ...selectedCells, start: { x, y } });\r\n    } else if (!selectedCells.end) {\r\n      setSelectedCells({ ...selectedCells, end: { x, y } });\r\n    }\r\n  };\r\n\r\n  const fetchPath = async (start, end) => {\r\n    try {\r\n      const res = await fetch('http://localhost:8080/find-path', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ start, end }),\r\n      });\r\n      const data = await res.json();\r\n      setPath(data.shortestPath);\r\n    } catch (error) {\r\n      console.error('Error fetching path:', error);\r\n    }\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setSelectedCells({ start: null, end: null });\r\n    setPath([]); // Clear the path when resetting\r\n  };\r\n\r\n  return (\r\n    <div className=\"grid-container\">\r\n      <div className=\"grid\">\r\n        {[...Array(20)].map((_, row) => (\r\n          <div key={row} className=\"row\">\r\n            {[...Array(20)].map((_, col) => {\r\n              const isStart = selectedCells.start?.x === row && selectedCells.start?.y === col;\r\n              const isEnd = selectedCells.end?.x === row && selectedCells.end?.y === col;\r\n              const isPath = path.some(p => p.x === row && p.y === col);\r\n              return (\r\n                <div\r\n                  key={col}\r\n                  className={`cell ${isStart ? 'start' : isEnd ? 'end' : isPath ? 'path' : ''}`}\r\n                  onClick={() => handleCellClick(row, col)}\r\n                >\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <button className=\"reset-button\" onClick={handleReset}>\r\n        Reset\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Grid;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}