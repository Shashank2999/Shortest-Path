{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\singh\\\\pathfinder-app\\\\frontend\\\\src\\\\grid.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './grid.css'; // For styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Grid = () => {\n  _s();\n  const [selectedCells, setSelectedCells] = useState({\n    start: null,\n    end: null\n  });\n  const [path, setPath] = useState([]);\n\n  // Reset path whenever a new start or end tile is selected\n  useEffect(() => {\n    if (selectedCells.start && selectedCells.end) {\n      fetchPath(selectedCells.start, selectedCells.end);\n    }\n  }, [selectedCells]);\n  const handleCellClick = (x, y) => {\n    // If start is not selected, select start\n    if (!selectedCells.start) {\n      setSelectedCells({\n        ...selectedCells,\n        start: {\n          x,\n          y\n        }\n      });\n    }\n    // If end is not selected, select end\n    else if (!selectedCells.end) {\n      setSelectedCells({\n        ...selectedCells,\n        end: {\n          x,\n          y\n        }\n      });\n    }\n  };\n  const fetchPath = async (start, end) => {\n    try {\n      const res = await fetch('http://localhost:8080/find-path', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          start,\n          end\n        })\n      });\n      const data = await res.json();\n      setPath(data.shortestPath);\n    } catch (error) {\n      console.error('Error fetching path:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid\",\n    children: [...Array(20)].map((_, row) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [...Array(20)].map((_, col) => {\n        var _selectedCells$start, _selectedCells$start2, _selectedCells$end, _selectedCells$end2;\n        const isStart = ((_selectedCells$start = selectedCells.start) === null || _selectedCells$start === void 0 ? void 0 : _selectedCells$start.x) === row && ((_selectedCells$start2 = selectedCells.start) === null || _selectedCells$start2 === void 0 ? void 0 : _selectedCells$start2.y) === col;\n        const isEnd = ((_selectedCells$end = selectedCells.end) === null || _selectedCells$end === void 0 ? void 0 : _selectedCells$end.x) === row && ((_selectedCells$end2 = selectedCells.end) === null || _selectedCells$end2 === void 0 ? void 0 : _selectedCells$end2.y) === col;\n        const isPath = path.some(p => p.x === row && p.y === col);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `cell ${isStart ? 'start' : isEnd ? 'end' : isPath ? 'path' : ''}`,\n          onClick: () => handleCellClick(row, col)\n        }, col, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 29\n        }, this);\n      })\n    }, row, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n_s(Grid, \"VGbpfChPwj7xhi9T+45h6E5UKMs=\");\n_c = Grid;\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Grid","_s","selectedCells","setSelectedCells","start","end","path","setPath","fetchPath","handleCellClick","x","y","res","fetch","method","headers","body","JSON","stringify","data","json","shortestPath","error","console","className","children","Array","map","_","row","col","_selectedCells$start","_selectedCells$start2","_selectedCells$end","_selectedCells$end2","isStart","isEnd","isPath","some","p","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/singh/pathfinder-app/frontend/src/grid.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './grid.css';  // For styling\r\n\r\nconst Grid = () => {\r\n    const [selectedCells, setSelectedCells] = useState({ start: null, end: null });\r\n    const [path, setPath] = useState([]);\r\n\r\n    // Reset path whenever a new start or end tile is selected\r\n    useEffect(() => {\r\n        if (selectedCells.start && selectedCells.end) {\r\n            fetchPath(selectedCells.start, selectedCells.end);\r\n        }\r\n    }, [selectedCells]);\r\n\r\n    const handleCellClick = (x, y) => {\r\n        // If start is not selected, select start\r\n        if (!selectedCells.start) {\r\n            setSelectedCells({ ...selectedCells, start: { x, y } });\r\n        }\r\n        // If end is not selected, select end\r\n        else if (!selectedCells.end) {\r\n            setSelectedCells({ ...selectedCells, end: { x, y } });\r\n        }\r\n    };\r\n\r\n    const fetchPath = async (start, end) => {\r\n        try {\r\n            const res = await fetch('http://localhost:8080/find-path', {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ start, end }),\r\n            });\r\n            const data = await res.json();\r\n            setPath(data.shortestPath);\r\n        } catch (error) {\r\n            console.error('Error fetching path:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"grid\">\r\n            {[...Array(20)].map((_, row) => (\r\n                <div key={row} className=\"row\">\r\n                    {[...Array(20)].map((_, col) => {\r\n                        const isStart = selectedCells.start?.x === row && selectedCells.start?.y === col;\r\n                        const isEnd = selectedCells.end?.x === row && selectedCells.end?.y === col;\r\n                        const isPath = path.some(p => p.x === row && p.y === col);\r\n                        return (\r\n                            <div\r\n                                key={col}\r\n                                className={`cell ${isStart ? 'start' : isEnd ? 'end' : isPath ? 'path' : ''}`}\r\n                                onClick={() => handleCellClick(row, col)}\r\n                            >\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Grid;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}